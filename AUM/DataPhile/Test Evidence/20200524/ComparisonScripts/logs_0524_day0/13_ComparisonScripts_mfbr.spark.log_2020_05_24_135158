Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
Spark context Web UI available at http://azcedledgev001.v01caedl.manulife.com:4040
Spark context available as 'sc' (master = local[*], app id = local-1590342729325).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.3.0.2.6.5.149-2
      /_/
         
Using Scala version 2.11.8 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_241)
Type in expressions to have them evaluated.
Type :help for more information.

scala> val t_process_date = "2020-05-17"
t_process_date: String = 2020-05-17

scala> val s_process_date = "2020-05-01"
s_process_date: String = 2020-05-01

scala> :load '13_ComparisonScripts_mfbr.spark' 
Loading 13_ComparisonScripts_mfbr.spark...
r1: org.apache.spark.sql.DataFrame = [branch: string, last_dt: date ... 18 more fields]
r2: org.apache.spark.sql.DataFrame = [branch: string, last_dt: date ... 18 more fields]
diff: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [branch: string, last_dt: date ... 18 more fields]
[Stage 0:>                                                          (0 + 2) / 2][Stage 0:>                  (0 + 2) / 2][Stage 1:>                 (0 + 6) / 30][Stage 0:>                  (0 + 2) / 2][Stage 1:>                 (1 + 7) / 30][Stage 0:>                  (0 + 2) / 2][Stage 1:===>              (5 + 6) / 30][Stage 0:>                  (0 + 2) / 2][Stage 1:====>             (8 + 6) / 30][Stage 0:>                  (0 + 2) / 2][Stage 1:=====>           (10 + 6) / 30][Stage 0:>                  (0 + 2) / 2][Stage 1:=======>         (13 + 6) / 30][Stage 0:>                  (0 + 2) / 2][Stage 1:=======>         (14 + 6) / 30][Stage 1:============================>                            (15 + 8) / 30][Stage 1:=========================================>               (22 + 8) / 30][Stage 2:>                                                        (0 + 8) / 200][Stage 2:=>                                                       (6 + 8) / 200][Stage 2:====>                                                   (16 + 8) / 200][Stage 2:=========>                                              (33 + 8) / 200][Stage 2:=============>                                          (48 + 8) / 200][Stage 2:===================>                                    (69 + 8) / 200][Stage 2:=======================>                                (85 + 8) / 200][Stage 2:============================>                          (104 + 8) / 200][Stage 2:=================================>                     (122 + 8) / 200][Stage 2:=======================================>               (144 + 8) / 200][Stage 2:============================================>          (163 + 8) / 200][Stage 2:==================================================>    (185 + 8) / 200][Stage 3:==============================>                        (110 + 8) / 200][Stage 3:========================================>              (149 + 8) / 200][Stage 3:====================================================>  (190 + 8) / 200]                                                                                Count with mismatches = 0
[Stage 5:=====>            (9 + 8) / 30][Stage 6:>                  (0 + 0) / 2][Stage 5:=======>         (14 + 8) / 30][Stage 6:>                  (0 + 0) / 2][Stage 5:=========>       (17 + 8) / 30][Stage 6:>                  (0 + 0) / 2][Stage 5:=============>   (23 + 7) / 30][Stage 6:>                  (0 + 1) / 2][Stage 5:===============> (28 + 2) / 30][Stage 6:>                  (0 + 2) / 2][Stage 6:>                                                          (0 + 2) / 2][Stage 7:===============>                                        (55 + 8) / 200][Stage 7:======================>                                 (80 + 8) / 200][Stage 7:=============================>                         (109 + 8) / 200][Stage 7:=====================================>                 (135 + 8) / 200][Stage 7:===========================================>           (159 + 8) / 200][Stage 7:==================================================>    (184 + 9) / 200]                                                                                res1: Long = 0
[Stage 10:======>         (13 + 8) / 30][Stage 11:>                 (0 + 0) / 2][Stage 10:=======>        (14 + 8) / 30][Stage 11:>                 (0 + 0) / 2][Stage 10:==========>     (20 + 8) / 30][Stage 11:>                 (0 + 0) / 2][Stage 10:==============> (27 + 3) / 30][Stage 11:>                 (0 + 2) / 2][Stage 11:>                                                         (0 + 2) / 2][Stage 12:==========================>                            (97 + 8) / 200][Stage 12:==================================>                   (129 + 8) / 200][Stage 12:===========================================>          (161 + 8) / 200][Stage 12:===================================================>  (191 + 8) / 200]                                                                                +------+-------+---------+--------+----------+----+------+-------+----+-------+--------+-----+------+-----------+-------+-----------+---------+--------------+------------------+-----------+
|branch|last_dt|last_time|last_usr|short_name|addr|ph_fax|ph_work|city|country|province|pcode|ibcode|ph_tollfree|bank_id|oth_br_code|residence|bridge_enabled|behaviour_group_id|broker_code|
+------+-------+---------+--------+----------+----+------+-------+----+-------+--------+-----+------+-----------+-------+-----------+---------+--------------+------------------+-----------+
+------+-------+---------+--------+----------+----+------+-------+----+-------+--------+-----+------+-----------+-------+-----------+---------+--------------+------------------+-----------+


scala> 

scala> :quit
