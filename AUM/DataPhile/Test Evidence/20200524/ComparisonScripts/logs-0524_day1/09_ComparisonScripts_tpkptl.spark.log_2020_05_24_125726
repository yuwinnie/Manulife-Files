Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
Spark context Web UI available at http://azcedledgev001.v01caedl.manulife.com:4040
Spark context available as 'sc' (master = local[*], app id = local-1590339457141).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.3.0.2.6.5.149-2
      /_/
         
Using Scala version 2.11.8 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_241)
Type in expressions to have them evaluated.
Type :help for more information.

scala> val t_process_date = "2020-05-24"
t_process_date: String = 2020-05-24

scala> val s_process_date = "2020-05-02"
s_process_date: String = 2020-05-02

scala> :load '09_ComparisonScripts_tpkptl.spark' 
Loading 09_ComparisonScripts_tpkptl.spark...
r1: org.apache.spark.sql.DataFrame = [proc_dt: date, trd_num: int ... 7 more fields]
r2: org.apache.spark.sql.DataFrame = [proc_dt: date, trd_num: int ... 7 more fields]
diff: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [proc_dt: date, trd_num: int ... 7 more fields]
[Stage 0:>                 (0 + 8) / 21][Stage 1:>                  (0 + 0) / 7][Stage 0:===========>     (14 + 7) / 21][Stage 1:>                  (0 + 1) / 7][Stage 0:============>    (15 + 6) / 21][Stage 1:>                  (0 + 2) / 7][Stage 0:============>    (16 + 5) / 21][Stage 1:>                  (0 + 3) / 7][Stage 0:=============>   (17 + 4) / 21][Stage 1:>                  (0 + 4) / 7][Stage 0:==============>  (18 + 3) / 21][Stage 1:==>                (1 + 5) / 7][Stage 0:================>(20 + 1) / 21][Stage 1:==>                (1 + 6) / 7][Stage 1:================>                                          (2 + 5) / 7][Stage 1:=========================>                                 (3 + 4) / 7][Stage 1:==================================================>        (6 + 1) / 7][Stage 2:==>                                                      (8 + 8) / 200][Stage 2:=====>                                                  (19 + 9) / 200][Stage 2:==========>                                             (36 + 8) / 200][Stage 2:==============>                                         (53 + 8) / 200][Stage 2:====================>                                   (73 + 8) / 200][Stage 2:==========================>                             (93 + 8) / 200][Stage 2:=============================>                         (107 + 8) / 200][Stage 2:==================================>                    (126 + 9) / 200][Stage 2:========================================>              (149 + 9) / 200][Stage 2:===============================================>       (173 + 8) / 200][Stage 2:===================================================>   (189 + 8) / 200][Stage 3:=============================>                         (109 + 9) / 200][Stage 3:===========================================>           (158 + 8) / 200][Stage 3:==================================================>    (182 + 8) / 200]                                                                                Count with mismatches = 0
[Stage 5:===========>     (14 + 7) / 21][Stage 6:>                  (0 + 1) / 7][Stage 5:============>    (15 + 6) / 21][Stage 6:>                  (0 + 2) / 7][Stage 5:============>    (16 + 5) / 21][Stage 6:>                  (0 + 3) / 7][Stage 5:==============>  (18 + 3) / 21][Stage 6:==>                (1 + 5) / 7][Stage 5:===============> (19 + 2) / 21][Stage 6:==>                (1 + 6) / 7][Stage 6:================>                                          (2 + 5) / 7][Stage 6:=========================>                                 (3 + 4) / 7][Stage 6:=================================>                         (4 + 3) / 7][Stage 7:===================>                                    (71 + 8) / 200][Stage 7:==========================>                             (95 + 8) / 200][Stage 7:================================>                      (119 + 8) / 200][Stage 7:========================================>              (147 + 8) / 200][Stage 7:==================================================>    (182 + 8) / 200]                                                                                res1: Long = 0
[Stage 10:==========>     (14 + 7) / 21][Stage 11:>                 (0 + 1) / 7][Stage 10:===========>    (15 + 6) / 21][Stage 11:>                 (0 + 2) / 7][Stage 10:============>   (16 + 5) / 21][Stage 11:>                 (0 + 3) / 7][Stage 10:=============>  (18 + 3) / 21][Stage 11:==>               (1 + 5) / 7][Stage 11:========>                                                 (1 + 6) / 7][Stage 11:================>                                         (2 + 5) / 7][Stage 11:========================>                                 (3 + 4) / 7][Stage 11:=================================>                        (4 + 3) / 7][Stage 12:=======================>                               (87 + 8) / 200][Stage 12:==============================>                       (114 + 8) / 200][Stage 12:======================================>               (144 + 9) / 200][Stage 12:=================================================>    (183 + 8) / 200]                                                                                +-------+-------+-------+-------+--------+-----------+---------+--------+-----------+
|proc_dt|trd_num|last_dt|tlr_num|tlr_text|client_side|last_time|last_usr|broker_code|
+-------+-------+-------+-------+--------+-----------+---------+--------+-----------+
+-------+-------+-------+-------+--------+-----------+---------+--------+-----------+


scala> 

scala> :quit
