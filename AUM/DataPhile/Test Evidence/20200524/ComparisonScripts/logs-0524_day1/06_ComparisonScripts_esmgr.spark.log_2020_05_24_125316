Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
Spark context Web UI available at http://azcedledgev001.v01caedl.manulife.com:4040
Spark context available as 'sc' (master = local[*], app id = local-1590339207576).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.3.0.2.6.5.149-2
      /_/
         
Using Scala version 2.11.8 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_241)
Type in expressions to have them evaluated.
Type :help for more information.

scala> val t_process_date = "2020-05-24"
t_process_date: String = 2020-05-24

scala> val s_process_date = "2020-05-02"
s_process_date: String = 2020-05-02

scala> :load '06_ComparisonScripts_esmgr.spark' 
Loading 06_ComparisonScripts_esmgr.spark...
r1: org.apache.spark.sql.DataFrame = [fund_code: string, fund_type: string ... 19 more fields]
r2: org.apache.spark.sql.DataFrame = [fund_code: string, fund_type: string ... 19 more fields]
diff: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [fund_code: string, fund_type: string ... 19 more fields]
[Stage 0:>                                                          (0 + 2) / 2][Stage 0:>                  (0 + 2) / 2][Stage 1:>                 (0 + 6) / 30][Stage 0:>                  (0 + 2) / 2][Stage 1:>                 (1 + 6) / 30][Stage 0:>                  (0 + 2) / 2][Stage 1:=>                (2 + 6) / 30][Stage 0:>                  (0 + 2) / 2][Stage 1:===>              (5 + 6) / 30][Stage 0:>                  (0 + 2) / 2][Stage 1:====>             (8 + 6) / 30][Stage 0:>                  (0 + 2) / 2][Stage 1:=====>           (10 + 6) / 30][Stage 0:>                  (0 + 2) / 2][Stage 1:======>          (12 + 6) / 30][Stage 0:>                  (0 + 2) / 2][Stage 1:=========>       (16 + 6) / 30][Stage 0:>                  (0 + 2) / 2][Stage 1:===========>     (20 + 6) / 30][Stage 0:>                  (0 + 2) / 2][Stage 1:===============> (27 + 3) / 30][Stage 1:=====================================================>   (28 + 2) / 30][Stage 1:=======================================================> (29 + 1) / 30][Stage 2:>                                                        (0 + 8) / 200][Stage 2:==>                                                      (8 + 8) / 200][Stage 2:====>                                                   (15 + 8) / 200][Stage 2:======>                                                 (24 + 8) / 200][Stage 2:==========>                                             (39 + 8) / 200][Stage 2:=============>                                          (48 + 9) / 200][Stage 2:=================>                                      (63 + 8) / 200][Stage 2:=====================>                                  (78 + 8) / 200][Stage 2:==========================>                             (93 + 8) / 200][Stage 2:=============================>                         (107 + 8) / 200][Stage 2:=================================>                     (121 + 8) / 200][Stage 2:====================================>                  (132 + 8) / 200][Stage 2:========================================>              (147 + 8) / 200][Stage 2:===========================================>           (159 + 8) / 200][Stage 2:==============================================>        (170 + 8) / 200][Stage 2:==================================================>    (182 + 8) / 200][Stage 3:====================================>                  (133 + 8) / 200][Stage 3:===========================================>           (157 + 8) / 200][Stage 3:===================================================>   (189 + 8) / 200]                                                                                Count with mismatches = 0
[Stage 5:>                  (0 + 2) / 2][Stage 6:===>              (5 + 6) / 30][Stage 5:>                  (0 + 2) / 2][Stage 6:===>              (6 + 6) / 30][Stage 5:>                  (0 + 2) / 2][Stage 6:=====>            (9 + 6) / 30][Stage 5:>                  (0 + 2) / 2][Stage 6:======>          (11 + 6) / 30][Stage 5:>                  (0 + 2) / 2][Stage 6:======>          (12 + 6) / 30][Stage 5:>                  (0 + 2) / 2][Stage 6:=======>         (14 + 6) / 30][Stage 5:>                  (0 + 2) / 2][Stage 6:==========>      (18 + 6) / 30][Stage 5:>                  (0 + 2) / 2][Stage 6:=============>   (23 + 6) / 30][Stage 5:>                  (0 + 2) / 2][Stage 6:===============> (28 + 2) / 30][Stage 6:=======================================================> (29 + 1) / 30][Stage 7:========>                                               (32 + 8) / 200][Stage 7:============>                                           (46 + 8) / 200][Stage 7:===============>                                        (57 + 8) / 200][Stage 7:====================>                                   (72 + 8) / 200][Stage 7:======================>                                 (82 + 8) / 200][Stage 7:==========================>                             (94 + 8) / 200][Stage 7:=============================>                         (107 + 8) / 200][Stage 7:================================>                      (119 + 8) / 200][Stage 7:====================================>                  (132 + 8) / 200][Stage 7:========================================>              (146 + 8) / 200][Stage 7:===========================================>           (158 + 8) / 200][Stage 7:==============================================>        (169 + 8) / 200][Stage 7:=================================================>     (181 + 8) / 200][Stage 7:====================================================>  (190 + 8) / 200][Stage 8:========================>                               (87 + 8) / 200][Stage 8:=======================================>               (142 + 8) / 200]                                                                                res1: Long = 0
[Stage 10:=====>          (10 + 8) / 30][Stage 11:>                 (0 + 0) / 2][Stage 10:=========>      (17 + 8) / 30][Stage 11:>                 (0 + 0) / 2][Stage 10:==============> (27 + 3) / 30][Stage 11:>                 (0 + 2) / 2][Stage 10:===============>(29 + 1) / 30][Stage 11:>                 (0 + 2) / 2][Stage 11:>                                                         (0 + 2) / 2][Stage 12:=================>                                     (64 + 8) / 200][Stage 12:========================>                              (88 + 8) / 200][Stage 12:=============================>                        (109 + 8) / 200][Stage 12:====================================>                 (135 + 8) / 200][Stage 12:==========================================>           (156 + 8) / 200][Stage 12:================================================>     (181 + 8) / 200]                                                                                +---------+---------+--------+--------+-------+---------+--------+--------+----+---------+----------+--------+-------------+--------+--------+--------+---------+---+---+-----------+-----------+
|fund_code|fund_type|trd_acct|box_acct|last_dt|last_time|last_usr|mkt_code|name|init_dest|batch_dest|send_nfu|send_transfer|approved|bucket_s|bucket_w|nfu_group|epa|url|french_name|broker_code|
+---------+---------+--------+--------+-------+---------+--------+--------+----+---------+----------+--------+-------------+--------+--------+--------+---------+---+---+-----------+-----------+
+---------+---------+--------+--------+-------+---------+--------+--------+----+---------+----------+--------+-------------+--------+--------+--------+---------+---+---+-----------+-----------+


scala> 

scala> :quit
