Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
Spark context Web UI available at http://azcedledgev001.v01caedl.manulife.com:4040
Spark context available as 'sc' (master = local[*], app id = local-1590340017658).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.3.0.2.6.5.149-2
      /_/
         
Using Scala version 2.11.8 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_241)
Type in expressions to have them evaluated.
Type :help for more information.

scala> val t_process_date = "2020-05-24"
t_process_date: String = 2020-05-24

scala> val s_process_date = "2020-05-02"
s_process_date: String = 2020-05-02

scala> :load '13_ComparisonScripts_mfbr.spark' 
Loading 13_ComparisonScripts_mfbr.spark...
r1: org.apache.spark.sql.DataFrame = [branch: string, last_dt: date ... 18 more fields]
r2: org.apache.spark.sql.DataFrame = [branch: string, last_dt: date ... 18 more fields]
diff: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [branch: string, last_dt: date ... 18 more fields]
[Stage 0:>                 (0 + 8) / 30][Stage 1:>                  (0 + 0) / 2][Stage 0:==>               (4 + 9) / 30][Stage 1:>                  (0 + 0) / 2][Stage 0:====>             (8 + 8) / 30][Stage 1:>                  (0 + 0) / 2][Stage 0:=====>           (10 + 8) / 30][Stage 1:>                  (0 + 0) / 2][Stage 0:=======>         (14 + 8) / 30][Stage 1:>                  (0 + 0) / 2][Stage 0:=========>       (16 + 8) / 30][Stage 1:>                  (0 + 0) / 2][Stage 0:============>    (22 + 8) / 30][Stage 1:>                  (0 + 0) / 2][Stage 0:================>(29 + 1) / 30][Stage 1:>                  (0 + 2) / 2][Stage 1:>                                                          (0 + 2) / 2][Stage 2:>                                                        (0 + 8) / 200][Stage 2:===>                                                    (14 + 8) / 200][Stage 2:========>                                               (30 + 8) / 200][Stage 2:=============>                                          (49 + 8) / 200][Stage 2:==================>                                     (65 + 8) / 200][Stage 2:======================>                                 (80 + 8) / 200][Stage 2:===========================>                           (100 + 8) / 200][Stage 2:================================>                      (117 + 8) / 200][Stage 2:=====================================>                 (135 + 8) / 200][Stage 2:===========================================>           (157 + 8) / 200][Stage 2:================================================>      (176 + 8) / 200][Stage 2:======================================================>(197 + 3) / 200][Stage 3:========================================>              (146 + 8) / 200]                                                                                Count with mismatches = 0
[Stage 5:>                  (0 + 2) / 2][Stage 6:====>             (7 + 6) / 30][Stage 5:>                  (0 + 2) / 2][Stage 6:====>             (8 + 6) / 30][Stage 5:>                  (0 + 2) / 2][Stage 6:=======>         (13 + 6) / 30][Stage 5:>                  (0 + 2) / 2][Stage 6:=======>         (14 + 6) / 30][Stage 5:>                  (0 + 2) / 2][Stage 6:========>        (15 + 6) / 30][Stage 6:======================================>                  (20 + 8) / 30][Stage 6:=====================================================>   (28 + 2) / 30][Stage 7:==================>                                     (65 + 8) / 200][Stage 7:======================>                                 (82 + 8) / 200][Stage 7:===========================>                           (101 + 8) / 200][Stage 7:================================>                      (119 + 8) / 200][Stage 7:=======================================>               (144 + 8) / 200][Stage 7:==============================================>        (169 + 8) / 200][Stage 7:=====================================================> (196 + 4) / 200][Stage 8:==================================================>    (183 + 9) / 200]                                                                                res1: Long = 0
[Stage 10:======>         (13 + 8) / 30][Stage 11:>                 (0 + 0) / 2][Stage 10:========>       (16 + 8) / 30][Stage 11:>                 (0 + 0) / 2][Stage 10:===========>    (22 + 8) / 30][Stage 11:>                 (0 + 0) / 2][Stage 11:>                                                         (0 + 2) / 2][Stage 12:=============>                                         (49 + 8) / 200][Stage 12:====================>                                  (74 + 8) / 200][Stage 12:===========================>                           (99 + 8) / 200][Stage 12:=================================>                    (125 + 8) / 200][Stage 12:========================================>             (151 + 8) / 200][Stage 12:================================================>     (181 + 8) / 200]                                                                                +------+-------+---------+--------+----------+----+------+-------+----+-------+--------+-----+------+-----------+-------+-----------+---------+--------------+------------------+-----------+
|branch|last_dt|last_time|last_usr|short_name|addr|ph_fax|ph_work|city|country|province|pcode|ibcode|ph_tollfree|bank_id|oth_br_code|residence|bridge_enabled|behaviour_group_id|broker_code|
+------+-------+---------+--------+----------+----+------+-------+----+-------+--------+-----+------+-----------+-------+-----------+---------+--------------+------------------+-----------+
+------+-------+---------+--------+----------+----+------+-------+----+-------+--------+-----+------+-----------+-------+-----------+---------+--------------+------------------+-----------+


scala> 

scala> :quit
