Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
Spark context Web UI available at http://azcedledgev001.v01caedl.manulife.com:4040
Spark context available as 'sc' (master = local[*], app id = local-1590339414598).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.3.0.2.6.5.149-2
      /_/
         
Using Scala version 2.11.8 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_241)
Type in expressions to have them evaluated.
Type :help for more information.

scala> val t_process_date = "2020-05-24"
t_process_date: String = 2020-05-24

scala> val s_process_date = "2020-05-02"
s_process_date: String = 2020-05-02

scala> :load '08_ComparisonScripts_gnexch.spark' 
Loading 08_ComparisonScripts_gnexch.spark...
r1: org.apache.spark.sql.DataFrame = [rate: decimal(23,8), buy_fds: string ... 9 more fields]
r2: org.apache.spark.sql.DataFrame = [rate: decimal(23,8), buy_fds: string ... 9 more fields]
diff: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [rate: decimal(23,8), buy_fds: string ... 9 more fields]
[Stage 0:>                 (0 + 8) / 21][Stage 1:>                  (0 + 0) / 8][Stage 0:>                (1 + 15) / 21][Stage 1:>                  (0 + 0) / 8][Stage 0:==========>      (13 + 8) / 21][Stage 1:>                  (0 + 0) / 8][Stage 1:>                                                          (0 + 8) / 8][Stage 1:======================>                                    (3 + 5) / 8][Stage 1:===================================================>       (7 + 1) / 8][Stage 2:=======>                                                (28 + 8) / 200][Stage 2:=============>                                          (47 + 8) / 200][Stage 2:===================>                                    (69 + 8) / 200][Stage 2:==========================>                             (96 + 8) / 200][Stage 2:================================>                      (117 + 8) / 200][Stage 2:=======================================>               (145 + 8) / 200][Stage 2:===============================================>       (174 + 8) / 200][Stage 2:=====================================================> (194 + 6) / 200][Stage 3:==============================>                        (110 + 8) / 200][Stage 3:===========================================>           (158 + 8) / 200]                                                                                Count with mismatches = 0
[Stage 7:=========================>                              (92 + 8) / 200][Stage 7:=================================>                     (121 + 8) / 200][Stage 7:=========================================>             (151 + 8) / 200][Stage 7:================================================>      (177 + 8) / 200][Stage 8:===========================================>           (157 + 8) / 200]                                                                                res1: Long = 0
[Stage 12:==================================>                   (129 + 8) / 200][Stage 12:==============================================>       (173 + 9) / 200]                                                                                +----+-------+--------+---------+-------+-------+-------+---------+--------+---------+-----------+
|rate|buy_fds|sell_fds|tran_type|exch_dt|max_amt|last_dt|last_time|last_usr|exch_time|broker_code|
+----+-------+--------+---------+-------+-------+-------+---------+--------+---------+-----------+
+----+-------+--------+---------+-------+-------+-------+---------+--------+---------+-----------+


scala> 

scala> :quit
